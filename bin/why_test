#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'why_test_version'
require 'why_test'

include GLI

program_desc 'Generate test setup files and rake tasks'

version WhyTest::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'An extremely fast, expressive, and context-driven unit-testing framework. Protest the slow test.'
#arg_name 'Describe arguments to rspec here'
command :riot do |c|
  #c.desc 'Describe a switch to rspec'
  #c.switch :s

  #c.desc 'Describe a flag to rspec'
  #c.default_value 'default'
  #c.flag :f
  c.action do |global_options,options,args|
    dir = Dir.pwd
    g = Generator.new('riot')
    g.write_files(dir)
    g.info
    
    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'BDD for Ruby'
#arg_name 'Describe arguments to rspec here'
command :rspec do |c|
  c.action do |global_options,options,args|
    dir = Dir.pwd
    g = Generator.new('rspec')
    g.write_files(dir)
    g.info
  end
end

desc 'Work with your tests, not against them'
command :shindo do |c|
  c.action do |global_options,options,args|
    dir = Dir.pwd
    g = Generator.new('shindo')
    g.write_files(dir)
  end
end



pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
